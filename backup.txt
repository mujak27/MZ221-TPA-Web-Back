
func (r *postResolver) Senders(ctx context.Context, obj *model.Post) ([]*model.User, error) {
	var postSenders []*model.PostSender
	if err := r.DB.Find(&postSenders, obj.Senders).Error; err != nil {
		return nil, err
	}

	fmt.Println(postSenders)
	var sendersId = lo.Map[*model.PostSender, string](postSenders, func(x *model.PostSender, _ int) string {
		return x.UserId
	})

	fmt.Println(sendersId)

	var users []*model.User
	if err := r.DB.Find(&users, sendersId).Error; err != nil {
		return nil, err
	}
	return users, nil
}

func (r *mutationResolver) AddPostSender(ctx context.Context, id string) (*model.Post, error) {
	var post *model.Post
	if err := r.DB.First(&post, "id = ?", id).Error; err != nil {
		return nil, err
	}

	userId := auth.JwtGetValue(ctx).Userid

	sender := &model.PostSender{
		ID:     uuid.NewString(),
		UserId: userId,
		PostId: id,
	}
	r.senders = append(r.senders, sender)
	r.DB.Create(sender)

	return post, nil
}


func (r *mutationResolver) CreatePost(ctx context.Context, input model.InputPost) (*model.Post, error) {
	userId := auth.JwtGetValue(ctx).Userid

	post := &model.Post{
		ID:   uuid.NewString(),
		Text: input.Text,
	}
	r.posts = append(r.posts, post)

	sender := &model.PostSender{
		ID:     uuid.NewString(),
		UserId: userId,
		PostId: post.ID,
	}

	r.senders = append(r.senders, sender)

	r.DB.Create(post)
	r.DB.Create(sender)

	return post, nil
}