// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type InputFirstUpdateProfile struct {
	FirstName    string `json:"FirstName"`
	LastName     string `json:"LastName"`
	MidName      string `json:"MidName"`
	ProfilePhoto string `json:"ProfilePhoto"`
	Pronoun      string `json:"Pronoun"`
}

type InputPost struct {
	Text           string `json:"Text"`
	AttachmentLink string `json:"AttachmentLink"`
}

type InputUser struct {
	FirstName       string `json:"FirstName"`
	LastName        string `json:"LastName"`
	MidName         string `json:"MidName"`
	ProfilePhoto    string `json:"ProfilePhoto"`
	BackgroundPhoto string `json:"BackgroundPhoto"`
	Headline        string `json:"Headline"`
	Pronoun         string `json:"Pronoun"`
	About           string `json:"About"`
	Location        string `json:"Location"`
	ProfileLink     string `json:"ProfileLink"`
}

type MutationStatus string

const (
	MutationStatusSuccess      MutationStatus = "Success"
	MutationStatusNotFound     MutationStatus = "NotFound"
	MutationStatusAlreadyExist MutationStatus = "AlreadyExist"
	MutationStatusError        MutationStatus = "Error"
)

var AllMutationStatus = []MutationStatus{
	MutationStatusSuccess,
	MutationStatusNotFound,
	MutationStatusAlreadyExist,
	MutationStatusError,
}

func (e MutationStatus) IsValid() bool {
	switch e {
	case MutationStatusSuccess, MutationStatusNotFound, MutationStatusAlreadyExist, MutationStatusError:
		return true
	}
	return false
}

func (e MutationStatus) String() string {
	return string(e)
}

func (e *MutationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MutationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MutationStatus", str)
	}
	return nil
}

func (e MutationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
