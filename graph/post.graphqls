# GraphQL schema example
#
# https://gqlgen.com/getting-started/


directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION

type Post {
  ID : ID!
  Text: String!
  Sender: User! @goField(forceResolver: true)
  Comments: [Comment!]! @goField(forceResolver: true)
  Likes: [User!]! @goField(forceResolver: true)
  AttachmentLink : String
  CreatedAt : String!
}

type Comment {
  ID : ID!
  Text : String!
  Post : Post! @goField(forceResolver: true)
  Sender : User! @goField(forceResolver: true)
  Replies : [Comment!]! @goField(forceResolver: true)
  Likes: [User!]! @goField(forceResolver: true)
  CreatedAt : String!
}



extend type Query {
  Post(id: ID!): Post!
  Posts(Limit:Int!, Offset:Int!): [Post!]! @auth
  PostsByUserId(id: ID!): [Post!]! @auth
  PostsByKeyword(Keyword : String!,, Limit: Int!, Offset:Int!):[Post!]!

  Comment(id : ID!): Comment!
  Comments(CommentId: ID, PostId : ID!): [Comment!]!
  IsLikePost(id : ID!) : Boolean!
  IsLikeComment(id : ID!) : Boolean!
}

extend type Mutation {
  CreatePost(input: InputPost!): Post!
  UpdatePost(id: ID!): Post!
  DeletePost(id: ID!): Post!

  # AddPostSender(id: ID!): Post!
  LikePost(id: ID!): Any! @auth
  UnLikePost(id: ID!): Any! @auth
  LikeComment(id: ID!): Any! @auth
  UnLikeComment(id: ID!): Any! @auth
  CommentPost(input : InputComment):Any! @auth
}

input InputPost {
  Text: String!
  AttachmentLink: String!
}

input InputComment {
  PostId : String!
  RepliedToId : String!
  Text : String! 
}

