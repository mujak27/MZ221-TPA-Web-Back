
scalar Any
scalar Upload

enum ConnectStatus {
  Connected
  SentByUser1
  SentByUser2
  NotConnected
}

enum MutationStatus {
  Success
  NotFound
  AlreadyExist
  Error
}

type Experience {
  ID: ID!
  Position: String!
  Desc: String!
  Company: String!
  StartedAt: String!
  EndedAt: String!
  IsActive : Boolean!
}

type Education {
  ID: ID!
  School  : String!
  Field : String!
  StartedAt : String!
  EndedAt : String!
}


type User {
  ID: ID! 
  Email : String!
  Password : String!
  FirstName : String!
  LastName : String!
  MidName : String!

  IsActive : Boolean!
  ProfilePhoto : String!
  BackgroundPhoto : String!
  Headline : String!
  Pronoun : String!
  ProfileLink : String!
  About : String!
  Location : String!
  Visits : [User!]!  @goField(forceResolver: true)
  Follows : [User!]! @goField(forceResolver: true)
  Experiences : [Experience!]! @goField(forceResolver: true)
  Educations : [Education!]! @goField(forceResolver: true)

  IsSso : Boolean!
  HasFilledData : Boolean!
}

type Job {
  ID : ID!
  User : User! @goField(forceResolver: true)
  Text : String!
}

type Activity {
  ID : ID!
  User : User! @goField(forceResolver: true)
  Text : String!
}

# user 1 sends to user 2
type Message {
  ID : ID!
  Text : String!
  User1 : User! @goField(forceResolver: true)
  User2 : User! @goField(forceResolver: true)
  CreatedAt : String!
}



type Activation {
  ID : ID!
  User : User! @goField(forceResolver: true)
}


type Reset {
  ID : ID!
  User : User! @goField(forceResolver: true)
}

# 2 way
# id1 < id2
type Connection {
  ID : ID!
  User1 : User! @goField(forceResolver: true)
  User2 : User! @goField(forceResolver: true)
}

# user 1 request to user 2
type ConnectRequest {
  ID : ID!
  User1 : User! @goField(forceResolver: true)
  User2 : User! @goField(forceResolver: true)
}


# user 1 follow user 2
# type Follow {
#   ID : ID!
#   User1 : User! @goField(forceResolver: true)
#   User2 : User! @goField(forceResolver: true)
# }

type Query {
  user(id: ID!): User!
  UsersByName(name: String, Limit:Int!, Offset:Int!): [User!]!
  UserByLink(link : String!) : User!

  Activation(id: ID!): Activation!
  CheckReset(id : ID!) : User!

  IsFollow(id1:ID!, id2:ID!) : Boolean!
  IsConnect(id1:ID!, id2:ID!) : ConnectStatus!
  ConnectionRequest : [User!]!
  ConnectedUsers : [User!]! @auth
  Activities : [Activity!]! @auth

  Messages(id1: ID!, id2: ID!) : [Message!]!

  UsersSuggestion : [User!]! @auth

  Jobs : [Job!]! @auth
}

extend type Mutation {
  LoginRegisWithSSO(GoogleToken : String!) : String!
  Login(input : InputLogin!) : String!
  Register(input : InputRegister) : String!

  FirstUpdateProfile(input : InputFirstUpdateProfile!) : MutationStatus!
  UpdateProfile(input : InputUser!) : MutationStatus!
  ForgetPassword(email : String!) : MutationStatus!
  ResetPassword(id: ID!, password : String!) : MutationStatus!
  FirstFillData(input : InputUser!) : MutationStatus!

  SendActivation(id: ID!): MutationStatus!
  Activate(id: ID!): MutationStatus!

  Follow(id1: ID!, id2: ID!): MutationStatus!
  UnFollow(id1: ID!, id2: ID!): MutationStatus!

  SendConnectRequest(id1: ID!, id2: ID!): MutationStatus!
  DeleteConnectRequest(id1: ID!, id2: ID!): MutationStatus!
  AcceptConnectRequest(id1: ID!, id2: ID!): MutationStatus!
  UnConnect(id1: ID!, id2: ID!): MutationStatus!

  SendMessage(input : InputMessage!): MutationStatus!

  Visit(id: ID!): MutationStatus! @auth
  VisitByLink(ProfileLink: String!): MutationStatus! @auth

  AddEducation(input : InputEducation!): MutationStatus! @auth
  UpdateEducation(id:ID!, input : InputEducation!): MutationStatus! @auth
  RemoveEducation(id: ID!): MutationStatus! @auth

  AddExperience(input : InputExperience!): MutationStatus! @auth
  UpdateExperience(id:ID!, input : InputExperience!): MutationStatus! @auth
  RemoveExperience(id: ID!): MutationStatus! @auth

  AddJob(Text : String!) : MutationStatus! @auth
}

input InputMessage {
  Text : String!
  User1Id : String!
  User2Id : String!
}

input InputExperience {
  Position: String!
  Desc: String!
  Company: String!
  StartedAt: String!
  EndedAt: String!
  IsActive : Boolean!
}

input InputEducation {
  School  : String!
  Field : String!
  StartedAt : String!
  EndedAt : String!
}


input InputLogin {
  Email: String!
  Password: String!
}

input InputRegister {
  Email : String!
  Password : String!
}

input InputUser{
  FirstName : String!
  LastName : String!
  MidName : String!
  ProfilePhoto : String!
  BackgroundPhoto : String!
  Headline : String!
  Pronoun : String!
  About : String!
  Location : String!
  ProfileLink : String!
}

input InputFirstUpdateProfile {
  FirstName : String!
  LastName : String!
  MidName : String!
  ProfilePhoto : String!
  Pronoun : String!
}