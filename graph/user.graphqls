
scalar Any


type User {
  ID: ID! 
  Email : String!
  Password : String!
  FirstName : String!
  LastName : String!
  MidName : String!

  IsActive : Boolean!
  ProfilePhoto : String!
  BackgroundPhoto : String!
  Headline : String!
  Pronoun : String!
  ProfileLink : String!
  About : String!
  Location : String!
}

type Activation {
  ID : ID!
  User : User! @goField(forceResolver: true)
}

# user 1 visit user 2
type Visit {
  ID : ID!
  User1 : User! @goField(forceResolver: true)
  User2 : User! @goField(forceResolver: true)
}

# 2 way
type Connection {
  ID : ID!
  User1 : User! @goField(forceResolver: true)
  User2 : User! @goField(forceResolver: true)
}

# user 1 follow user 2
type Follow {
  ID : ID!
  User1 : User! @goField(forceResolver: true)
  User2 : User! @goField(forceResolver: true)
}

type Query {
  user(id: ID!): User!
  UsersByName(name: String): [User!]!

  login(input : InputLogin!) : Any!
  register(input : InputRegister) : Any!
  Activation(id: ID!): Activation!
}

input InputLogin {
  Email: String!
  Password: String!
}

input InputRegister {
  Email : String!
  Password : String!
  FirstName : String!
  LastName : String!
  MidName : String!
}

extend type Mutation {
  SendActivation(id: ID!): Any!
  Activate(id: ID!): Any!
}